// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum TransactionType {
    BANK_INTEREST
    DINE_OUT
    PAYCHECK
    GROCERIES
    NIGHT_OUT
    OUTGOING_DEPOSIT
    INTERNAL_TRANSFER
    INCOMING_DEPOSIT
    UTILITIES
    CLOTHING
    PERSONAL_GOODS
    CASH_DEPOSIT
    CASH_WITHDRAWAL
    CAR_MAINTENANCE
    MEDICINE
    UNKNOWN
    HOME_IMPORVEMENT
    WELLNES
    SCHOLARSHIP
    RIDE_HAILING
    HAIR_CUT
    GIFT
    VACATION
    FUEL
    CRYPTO
    RENT
}

enum PurposeCode {
    ACCT
    ADMG
    ADVA
    AEMP
    AGRT
    AIRB
    ALMY
    ANNI
    ANTS
    AREN
    BECH
    BENE
    BEXP
    BLDM
    BOCE
    BONU
    BUSB
    CASH
    CBFF
    CBTV
    CCHD
    CCRD
    CDBL
    CDCB
    CDCD
    CDCS
    CDOC
    CDQC
    CFEE
    CHAR
    CLPR
    CMDT
    COLL
    COMC
    COMM
    COMT
    COST
    CPYR
    CSDB
    CSLP
    CVCF
    DBTC
    DCRD
    DEPT
    DERI
    DIVD
    DMEQ
    DNTS
    ECPG
    ECPR
    ECPU
    ELEC
    ENRG
    ESTX
    ETUP
    FAND
    FERB
    FREX
    GASB
    GDDS
    GDSV
    GFRP
    GOVI
    GOVT
    GSCB
    GVEA
    GVEB
    GVEC
    GVED
    HEDG
    HLRP
    HLTC
    HLTI
    HREC
    HSPC
    HSTX
    ICCP
    ICRF
    IDCP
    IHRP
    INPC
    INSM
    INSU
    INTC
    INTE
    INTX
    LBRI
    LICF
    LIFI
    LIMA
    LOAN
    LOAR
    LTCF
    MDCS
    MSVC
    NETT
    NITX
    NOWS
    NWCH
    NWCM
    OFEE
    OTHR
    OTLC
    PADD
    PAYR
    PENS
    PHON
    POPE
    PPTI
    PRCP
    PRME
    PTSP
    RCKE
    RCPT
    REFU
    RENT
    RINP
    RLWY
    ROYA
    SALA
    SAVG
    SCVE
    SECU
    SLPI
    SSBE
    STDY
    SUBS
    SUPP
    TAXS
    TELI
    TRAD
    TREA
    TRFD
    TRNC
    VATX
    VIEW
    WEBI
    WTER
}

enum TransactionDirection {
    INCOMING
    OUTGOING
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Transaction   Transaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Transaction {
    id               Int                   @id @default(autoincrement())
    userId           String
    account          String
    amount           Int
    currency         String
    valueDate        DateTime?
    postingDate      DateTime
    description      String?
    purposeCode      PurposeCode?
    direction        TransactionDirection?
    type             TransactionType
    TrainTransaction TrainTransaction?
    user             User                  @relation(fields: [userId], references: [id])
}

model TrainTransaction {
    transactionId Int         @id
    transaction   Transaction @relation(fields: [transactionId], references: [id])
}
